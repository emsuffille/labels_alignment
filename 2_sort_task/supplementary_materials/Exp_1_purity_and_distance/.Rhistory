na.rm=FALSE, .drop=TRUE) {
library(plyr)
# Measure var on left, idvar + between vars on right of formula.
data.subjMean <- ddply(data, c(idvar, betweenvars), .drop=.drop,
.fun = function(xx, col, na.rm) {
c(subjMean = mean(xx[,col], na.rm=na.rm))
},
measurevar,
na.rm
)
# Put the subject means with original data
data <- merge(data, data.subjMean)
# Get the normalized data in a new column
measureNormedVar <- paste(measurevar, "_norm", sep="")
data[,measureNormedVar] <- data[,measurevar] - data[,"subjMean"] +
mean(data[,measurevar], na.rm=na.rm)
# Remove this subject mean column
data$subjMean <- NULL
return(data)
}
## Summarizes data, handling within-subjects variables by removing inter-subject variability.
## It will still work if there are no within-S variables.
## Gives count, un-normed mean, normed mean (with same between-group mean),
##   standard deviation, standard error of the mean, and confidence interval.
## If there are within-subject variables, calculate adjusted values using method from Morey (2008).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   withinvars: a vector containing names of columns that are within-subjects variables
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL,
idvar=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) {
# Ensure that the betweenvars and withinvars are factors
factorvars <- vapply(data[, c(betweenvars, withinvars), drop=FALSE],
FUN=is.factor, FUN.VALUE=logical(1))
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ",
paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
# Get the means from the un-normed data
datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)
# This is the name of the new column
measurevar_n <- paste(measurevar, "_norm", sep="")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Apply correction from Morey (2008) to the standard error and confidence interval
#  Get the product of the number of conditions of within-S variables
nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,
FUN.VALUE=numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
# Apply the correction factor
ndatac$sd <- ndatac$sd * correctionFactor
ndatac$se <- ndatac$se * correctionFactor
ndatac$ci <- ndatac$ci * correctionFactor
# Combine the un-normed means with the normed results
merge(datac, ndatac)
}
data <- read.csv(file="purity_data.csv", header=T, sep=",")
purity_by_cond  <- summarySEwithin(data, measurevar="purity",
withinvars=c("is_prototype"), betweenvars=c("Condition"), idvar=c("subjCode"),na.rm=TRUE)
library(tidyverse)
library(ggplot2)
library(lme4)
library(lmerTest)
library(directlabels)
library(ggthemes)
library(gridExtra)
library(grid)
library(lattice)
Center= function(x) {
if (is.numeric(x)) { return(x - mean(x, na.rm=T)) }
if (is.factor(x)) {
x= as.numeric(x)
return(x - mean(x, na.rm=T))
}
if (is.data.frame(x) || is.matrix(x)) {
m= matrix(nrow=nrow(x), ncol=ncol(x))
colnames(m)= paste("c", colnames(x), sep="")
for (i in 1:ncol(x)) {
m[,i]= myCenter(x[,i])
}
return(as.data.frame(m))
}
}
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
## Norms the data within specified groups in a data frame; it normalizes each
## subject (identified by idvar) so that they have the same mean, within each group
## specified by betweenvars.
##   data: a data frame.
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   na.rm: a boolean that indicates whether to ignore NA's
normDataWithin <- function(data=NULL, idvar, measurevar, betweenvars=NULL,
na.rm=FALSE, .drop=TRUE) {
library(plyr)
# Measure var on left, idvar + between vars on right of formula.
data.subjMean <- ddply(data, c(idvar, betweenvars), .drop=.drop,
.fun = function(xx, col, na.rm) {
c(subjMean = mean(xx[,col], na.rm=na.rm))
},
measurevar,
na.rm
)
# Put the subject means with original data
data <- merge(data, data.subjMean)
# Get the normalized data in a new column
measureNormedVar <- paste(measurevar, "_norm", sep="")
data[,measureNormedVar] <- data[,measurevar] - data[,"subjMean"] +
mean(data[,measurevar], na.rm=na.rm)
# Remove this subject mean column
data$subjMean <- NULL
return(data)
}
## Summarizes data, handling within-subjects variables by removing inter-subject variability.
## It will still work if there are no within-S variables.
## Gives count, un-normed mean, normed mean (with same between-group mean),
##   standard deviation, standard error of the mean, and confidence interval.
## If there are within-subject variables, calculate adjusted values using method from Morey (2008).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   withinvars: a vector containing names of columns that are within-subjects variables
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL,
idvar=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) {
# Ensure that the betweenvars and withinvars are factors
factorvars <- vapply(data[, c(betweenvars, withinvars), drop=FALSE],
FUN=is.factor, FUN.VALUE=logical(1))
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ",
paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
# Get the means from the un-normed data
datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)
# This is the name of the new column
measurevar_n <- paste(measurevar, "_norm", sep="")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Apply correction from Morey (2008) to the standard error and confidence interval
#  Get the product of the number of conditions of within-S variables
nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,
FUN.VALUE=numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
# Apply the correction factor
ndatac$sd <- ndatac$sd * correctionFactor
ndatac$se <- ndatac$se * correctionFactor
ndatac$ci <- ndatac$ci * correctionFactor
# Combine the un-normed means with the normed results
merge(datac, ndatac)
}
data <- read.csv(file="purity_data.csv", header=T, sep=",")
purity_by_cond  <- summarySEwithin(data, measurevar="purity",
withinvars=c("is_prototype"), betweenvars=c("Condition"), idvar=c("subjCode"),na.rm=TRUE)
purity_by_cond$upper= purity_by_cond$purity+purity_by_cond$se
purity_by_cond$lower= purity_by_cond$purity-purity_by_cond$se
names(purity_by_cond)[names(purity_by_cond) == "purity"] <- "Purity"
ggplot(purity_by_cond, aes(x=Condition, y=`Purity`,
group=`is_prototype`, color=is_prototype)) +
geom_line(aes(linetype=`is_prototype`),size=1.4, position=position_dodge(0.25))+
geom_point(aes(shape=`is_prototype`), position=position_dodge(0.25), size=2.2)+
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2,
position=position_dodge(0.25))+
geom_dl(data=purity_by_cond, aes(label=is_prototype), method=list("last.qp",cex=1.1),
position=position_nudge(0.18))+
xlab("\nCondition") + ylab("Purity\n")+
scale_color_manual(values= c("#000000", "#E69F00", "#56B4E9", "#B3414F"))+
theme_minimal() +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(text=element_text(size=18))+
theme(panel.border = element_blank(), axis.line = element_line())+
theme(legend.position="none", plot.caption = element_text(hjust = 0.3, size=8))
ggsave("Purity_by_condition.pdf",width=8,height=10)
data %>% select(purity,num_items) %>% cor
data %>%
group_by(Condition) %>%
dplyr::summarize(purity_size_correlation=cor(purity,num_items))
data %>%  lmer(purity~num_items*Condition+(1|subjCode),data=.) %>% summary
data %>% group_by(Condition) %>% dplyr::summarize(avg_purity=mean(purity), sd_cond=sd(purity))
data %>% glmer(purity~relevel(as.factor(Condition), ref = "Baseline")+(1|subjCode),weights=num_items,data=.,family=binomial) %>% summary
distance <- read.csv("dist_by_distortion_log.csv")
distance$Condition <- ifelse(distance$cond==-1, "Baseline",
ifelse(distance$cond==0, "No Labels", "With labels"))
distance2 <- distance
distance2$Item_type <- ifelse(distance2$distance_type=="other", "Other",
ifelse(distance2$distance_type=="proto_far", "Far",
ifelse(distance2$distance_type=="proto_near", "Near",
'Medium')))
distance2$Item_type <- factor(distance2$Item_type, levels = c("Other", "Near",
"Medium", "Far"))
dist_by_cond  <- summarySEwithin(distance2, measurevar="raw_dist",
withinvars=c("Item_type"), betweenvars=c("Condition"),
idvar=c("participant"),na.rm=TRUE)
dist_by_cond$upper= dist_by_cond$raw_dist_norm+dist_by_cond$se
dist_by_cond$lower= dist_by_cond$raw_dist_norm-dist_by_cond$se
names(dist_by_cond)[names(dist_by_cond) == "raw_dist_norm"] <- "Average distance from prototype"
p <- ggplot(dist_by_cond, aes(x=Condition, y=`Average distance from prototype`, fill=Item_type)) +
geom_bar(stat='identity', position='dodge')+
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2,
position=position_dodge(.9))
p +theme_minimal() +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(text=element_text(size=18))+
xlab("\nCondition")+ylab("Average distance from prototype")+
scale_fill_manual(values= c("#000000", "#E69F00", "#56B4E9", "#B3414F"))+
geom_text(aes(x=Condition,y=`Average distance from prototype`,label=Item_type),hjust=2,vjust=.33,angle=90,size=4,
position=position_dodge(.9))+
theme(panel.border = element_blank(), axis.line = element_line())+
theme(legend.position="none", plot.caption = element_text(hjust = 0.3, size=8))
ggsave("Distance_by_disortion_raw.pdf",width=8,height=10)
distance_log <- na.omit(distance)
distance_log$Item_type <-  ifelse(distance_log$log_distance_type=="log_proto_far", "Far",
ifelse(distance_log$log_distance_type=="log_proto_near", "Near",
'Medium'))
distance_log$Item_type <- factor(distance_log$Item_type, levels = c("Near",
"Medium", "Far"))
dist_by_cond  <- summarySEwithin(distance_log, measurevar="log_dist",
withinvars=c("Item_type"), betweenvars=c("Condition"),
idvar=c("participant"),na.rm=TRUE)
dist_by_cond$upper= abs(dist_by_cond$log_dist_norm+dist_by_cond$se)
dist_by_cond$lower= abs(dist_by_cond$log_dist_norm-dist_by_cond$se)
names(dist_by_cond)[names(dist_by_cond) == "log_dist_norm"] <- "Log distance from prototype"
p <- ggplot(dist_by_cond, aes(x=Condition, y=abs(`Log distance from prototype`), fill=Item_type)) +
geom_bar(stat='identity', position='dodge')+
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2,
position=position_dodge(.9))
p +theme_minimal() +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(text=element_text(size=18))+
xlab("\nCondition")+ylab("Log distance (abs) from prototype \n adjusted by 'other' distance")+
scale_fill_manual(values= c("#000000", "#E69F00", "#56B4E9", "#B3414F"))+
geom_text(aes(x=Condition,y=abs(`Log distance from prototype`),label=Item_type),hjust=3,vjust=.33,angle=90,size=3,
position=position_dodge(.9))+
theme(panel.border = element_blank(), axis.line = element_line())+
theme(legend.position="none", plot.caption = element_text(hjust = 0.3, size=8))
ggsave("Distance_by_disortion_log.pdf",width=8,height=10)
distance_log <- na.omit(distance)
distance_log$Item_type <-  ifelse(distance_log$log_distance_type=="log_proto_far", "Far",
ifelse(distance_log$log_distance_type=="log_proto_near", "Near",
'Medium'))
distance_log$Item_type <- factor(distance_log$Item_type, levels = c("Near",
"Medium", "Far"))
dist_by_cond  <- summarySEwithin(distance_log, measurevar="log_dist",
withinvars=c("Item_type"), betweenvars=c("Condition"),
idvar=c("participant"),na.rm=TRUE)
dist_by_cond$upper= abs(dist_by_cond$log_dist_norm+dist_by_cond$se)
dist_by_cond$lower= abs(dist_by_cond$log_dist_norm-dist_by_cond$se)
names(dist_by_cond)[names(dist_by_cond) == "log_dist_norm"] <- "Log distance from prototype"
p <- ggplot(dist_by_cond, aes(x=Condition, y=abs(`Log distance from prototype`), fill=Item_type)) +
geom_bar(stat='identity', position='dodge')+
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2,
position=position_dodge(.9))
p +theme_minimal() +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(text=element_text(size=18))+
xlab("\nCondition")+ylab("Log distance (abs) from prototype \n adjusted by 'other' distance")+
scale_fill_manual(values= c("#E69F00", "#56B4E9", "#B3414F"))+
geom_text(aes(x=Condition,y=abs(`Log distance from prototype`),label=Item_type),hjust=3,vjust=.33,angle=90,size=3,
position=position_dodge(.9))+
theme(panel.border = element_blank(), axis.line = element_line())+
theme(legend.position="none", plot.caption = element_text(hjust = 0.3, size=8))
ggsave("Distance_by_disortion_log.pdf",width=8,height=10)
distance2 <- distance
distance2$Item_type <- ifelse(distance2$distance_type=="other", "Other",
ifelse(distance2$distance_type=="proto_far", "Far",
ifelse(distance2$distance_type=="proto_near", "Near",
'Medium')))
distance2$Item_type <- factor(distance2$Item_type, levels = c("Other", "Near",
"Medium", "Far"))
dist_by_cond  <- summarySEwithin(distance2, measurevar="raw_dist",
withinvars=c("Item_type"), betweenvars=c("Condition"),
idvar=c("participant"),na.rm=TRUE)
dist_by_cond$upper= dist_by_cond$raw_dist_norm+dist_by_cond$se
dist_by_cond$lower= dist_by_cond$raw_dist_norm-dist_by_cond$se
names(dist_by_cond)[names(dist_by_cond) == "raw_dist_norm"] <- "Average distance from prototype"
p <- ggplot(dist_by_cond, aes(x=Condition, y=`Average distance from prototype`, fill=Item_type)) +
geom_bar(stat='identity', position='dodge')+
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2,
position=position_dodge(.9))
p +theme_minimal() +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(text=element_text(size=18))+
xlab("\nCondition")+ylab("Average distance from prototype")+
scale_fill_manual(values= c("#808080", "#E69F00", "#56B4E9", "#B3414F"))+
geom_text(aes(x=Condition,y=`Average distance from prototype`,label=Item_type),hjust=2,vjust=.33,angle=90,size=4,
position=position_dodge(.9))+
theme(panel.border = element_blank(), axis.line = element_line())+
theme(legend.position="none", plot.caption = element_text(hjust = 0.3, size=8))
ggsave("Distance_by_disortion_raw.pdf",width=8,height=10)
library(tidyverse)
library(ggplot2)
library(lme4)
library(lmerTest)
library(directlabels)
library(ggthemes)
library(gridExtra)
library(grid)
library(lattice)
Center= function(x) {
if (is.numeric(x)) { return(x - mean(x, na.rm=T)) }
if (is.factor(x)) {
x= as.numeric(x)
return(x - mean(x, na.rm=T))
}
if (is.data.frame(x) || is.matrix(x)) {
m= matrix(nrow=nrow(x), ncol=ncol(x))
colnames(m)= paste("c", colnames(x), sep="")
for (i in 1:ncol(x)) {
m[,i]= myCenter(x[,i])
}
return(as.data.frame(m))
}
}
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
## Norms the data within specified groups in a data frame; it normalizes each
## subject (identified by idvar) so that they have the same mean, within each group
## specified by betweenvars.
##   data: a data frame.
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   na.rm: a boolean that indicates whether to ignore NA's
normDataWithin <- function(data=NULL, idvar, measurevar, betweenvars=NULL,
na.rm=FALSE, .drop=TRUE) {
library(plyr)
# Measure var on left, idvar + between vars on right of formula.
data.subjMean <- ddply(data, c(idvar, betweenvars), .drop=.drop,
.fun = function(xx, col, na.rm) {
c(subjMean = mean(xx[,col], na.rm=na.rm))
},
measurevar,
na.rm
)
# Put the subject means with original data
data <- merge(data, data.subjMean)
# Get the normalized data in a new column
measureNormedVar <- paste(measurevar, "_norm", sep="")
data[,measureNormedVar] <- data[,measurevar] - data[,"subjMean"] +
mean(data[,measurevar], na.rm=na.rm)
# Remove this subject mean column
data$subjMean <- NULL
return(data)
}
## Summarizes data, handling within-subjects variables by removing inter-subject variability.
## It will still work if there are no within-S variables.
## Gives count, un-normed mean, normed mean (with same between-group mean),
##   standard deviation, standard error of the mean, and confidence interval.
## If there are within-subject variables, calculate adjusted values using method from Morey (2008).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   withinvars: a vector containing names of columns that are within-subjects variables
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL,
idvar=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) {
# Ensure that the betweenvars and withinvars are factors
factorvars <- vapply(data[, c(betweenvars, withinvars), drop=FALSE],
FUN=is.factor, FUN.VALUE=logical(1))
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ",
paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
# Get the means from the un-normed data
datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)
# This is the name of the new column
measurevar_n <- paste(measurevar, "_norm", sep="")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Apply correction from Morey (2008) to the standard error and confidence interval
#  Get the product of the number of conditions of within-S variables
nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,
FUN.VALUE=numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
# Apply the correction factor
ndatac$sd <- ndatac$sd * correctionFactor
ndatac$se <- ndatac$se * correctionFactor
ndatac$ci <- ndatac$ci * correctionFactor
# Combine the un-normed means with the normed results
merge(datac, ndatac)
}
data <- read.csv(file="purity_data.csv", header=T, sep=",")
purity_by_cond  <- summarySEwithin(data, measurevar="purity",
withinvars=c("is_prototype"), betweenvars=c("Condition"), idvar=c("subjCode"),na.rm=TRUE)
purity_by_cond$upper= purity_by_cond$purity+purity_by_cond$se
purity_by_cond$lower= purity_by_cond$purity-purity_by_cond$se
names(purity_by_cond)[names(purity_by_cond) == "purity"] <- "Purity"
ggplot(purity_by_cond, aes(x=Condition, y=`Purity`,
group=`is_prototype`, color=is_prototype)) +
geom_line(aes(linetype=`is_prototype`),size=1.4, position=position_dodge(0.25))+
geom_point(aes(shape=`is_prototype`), position=position_dodge(0.25), size=2.2)+
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2,
position=position_dodge(0.25))+
geom_dl(data=purity_by_cond, aes(label=is_prototype), method=list("last.qp",cex=1.1),
position=position_nudge(0.18))+
xlab("\nCondition") + ylab("Purity\n")+
scale_color_manual(values= c("#000000", "#E69F00", "#56B4E9", "#B3414F"))+
theme_minimal() +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(text=element_text(size=18))+
theme(panel.border = element_blank(), axis.line = element_line())+
theme(legend.position="none", plot.caption = element_text(hjust = 0.3, size=8))
ggsave("plots/Purity_by_condition.pdf",width=8,height=10)
